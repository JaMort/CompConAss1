import org.antlr.v4.runtime.tree.ParseTreeVisitor;
import org.antlr.v4.runtime.*;
import org.antlr.v4.runtime.tree.*;
import org.antlr.v4.runtime.CharStreams;
import java.util.*;
import java.io.IOException;

public class main {
    public static void main(String[] args) throws IOException{

	// we expect exactly one argument: the name of the input file
	if (args.length!=1) {
	    System.err.println("\n");
	    System.err.println("Simple calculator\n");
	    System.err.println("=================\n\n");
	    System.err.println("Please give as input argument a filename\n");
	    System.exit(-1);
	}
	String filename=args[0];

	// open the input file
	CharStream input = CharStreams.fromFileName(filename);
	    //new ANTLRFileStream (filename); // depricated
	
	// create a lexer/scanner
	simpleCalcLexer lex = new simpleCalcLexer(input);
	
	// get the stream of tokens from the scanner
	CommonTokenStream tokens = new CommonTokenStream(lex);
	
	// create a parser
	simpleCalcParser parser = new simpleCalcParser(tokens);
	
	// and parse anything from the grammar for "start"
	ParseTree parseTree = parser.start();

	// Construct an interpreter and run it on the parse tree
	Interpreter interpreter = new Interpreter();
	Double result=interpreter.visit(parseTree);
	
	System.out.println("The result is: "+result);
    }
}

// We write an interpreter that implements interface
// "simpleCalcVisitor<T>" that is automatically generated by ANTLR
// This is parameterized over a return type "<T>" which is in our case
// simply a Double.

class Interpreter extends AbstractParseTreeVisitor<Double> implements simpleCalcVisitor<Double> {

	public static HashMap<String, Double> env = new HashMap<String, Double>();

    public Double visitStart(simpleCalcParser.StartContext ctx){
    for (simpleCalcParser.SequenceContext s : ctx.s)
    	visit(s);
    for (simpleCalcParser.AssignContext a : ctx.as)
    	visit(a);
    for (simpleCalcParser.ConditionalContext c : ctx.cn)
    	visit(c);
	return visit(ctx.e);
    };

    public Double visitParenthesis(simpleCalcParser.ParenthesisContext ctx){
	return visit(ctx.e);
    };
    
    public Double visitVariable(simpleCalcParser.VariableContext ctx){
    String varname = ctx.x.getText();
	Double d=env.get(varname);
	if (d==null){
	    System.err.println("Variable " + varname + " is not defined.\n");
	    System.exit(-1);
	}
	return d;
    };
    
    public Double visitAddition(simpleCalcParser.AdditionContext ctx){
    if (ctx.op.getText().equals("+")) return visit(ctx.e1)+visit(ctx.e2);
	else return visit(ctx.e1)-visit(ctx.e2);
    };

    public Double visitMultiplication(simpleCalcParser.MultiplicationContext ctx){
	if (ctx.op.getText().equals("*")) return visit(ctx.e1)*visit(ctx.e2);
	else return visit(ctx.e1)/visit(ctx.e2);
    };

    public Double visitConstant(simpleCalcParser.ConstantContext ctx){
	return Double.parseDouble(ctx.c.getText()); 
    };

    public Double visitAssign(simpleCalcParser.AssignContext ctx) {
    	String varname = ctx.x.getText();
    	Double v = visit(ctx.e);
    	env.put(varname, v);
    	return v;
    }

    public Double visitSequence(simpleCalcParser.SequenceContext ctx) {
    	for (simpleCalcParser.CommandContext com : ctx.c) {
    		visit(com);
    	}

    	return null;
    };

    public Double visitCassign(simpleCalcParser.CassignContext ctx) {
    	return visit(ctx.a);
    };

    public Double visitCexpr(simpleCalcParser.CexprContext ctx) {
    	return visit(ctx.e);
    }

    public Double visitORif(simpleCalcParser.ORifContext ctx) {
    	if(visit(ctx.c1) == 1.0) {
    		visit(ctx.s);
    		return null;
    	}
    	for (simpleCalcParser.ConditionContext c : ctx.c2) {
    		if (visit(c) == 1.0) {
    			visit(ctx.s);
    			return null;
    		}
    	}
    	return null;
    }

    public Double visitORifelse(simpleCalcParser.ORifelseContext ctx) {
    	if(visit(ctx.c1) == 1.0) {
    		visit(ctx.s1);
    		return null;
    	}
    	for (simpleCalcParser.ConditionContext c : ctx.c2) {
    		if (visit(c) == 1.0) {
    			visit(ctx.s1);
    			return null;
    		}
    	}
    	visit(ctx.s2);
    	return null;
    }

    public Double visitANDif(simpleCalcParser.ANDifContext ctx) {
    	boolean isTrue;
    	if(visit(ctx.c1) == 1.0) {
    		isTrue = true;
    	}
    	else {
    		isTrue = false;
    	}
    	if(isTrue) {
    		for (simpleCalcParser.ConditionContext c : ctx.c2) {
    			if(visit(c) != 1.0) {
    				isTrue = false;
    			}
    		}

    	}
    	if(isTrue) {
    		visit(ctx.s);
    	}
    	return null;
    }

    public Double visitANDifelse(simpleCalcParser.ANDifelseContext ctx) {
    	boolean isTrue;
    	if(visit(ctx.c1) == 1.0) {
    		isTrue = true;
    	}
    	else {
    		isTrue = false;
    	}
    	if(isTrue) {
    		for (simpleCalcParser.ConditionContext c : ctx.c2) {
    			if(visit(c) != 1.0) {
    				isTrue = false;
    			}
    		}

    	}
    	if(isTrue) {
    		visit(ctx.s1);
    	}
    	else {
    		visit(ctx.s2);
    	}
    	return null;
    }


    public Double visitEquals(simpleCalcParser.EqualsContext ctx) {
    	if(visit(ctx.e1).equals(visit(ctx.e2))) {
    		return 1.0;
    	}
    	else return 0.0;
    }

    public Double visitNotequals(simpleCalcParser.NotequalsContext ctx) {
    	if(!(visit(ctx.e1).equals(visit(ctx.e2)))) {
    		return 1.0;
    	}
    	else return 0.0;
    }

    public Double visitGreater(simpleCalcParser.GreaterContext ctx) {
    	if(visit(ctx.e1) > visit(ctx.e2)) {
    		return 1.0;
    	}
    	else return 0.0;
    }

    public Double visitGreaterEquals(simpleCalcParser.GreaterEqualsContext ctx) {
    	if(visit(ctx.e1) >= visit(ctx.e2)) {
    		return 1.0;
    	}
    	else return 0.0;
    }

    public Double visitLesser(simpleCalcParser.LesserContext ctx) {
    	if(visit(ctx.e1) < visit(ctx.e2)) {
    		return 1.0;
    	}
    	else return 0.0;
    }

    public Double visitLesserEquals(simpleCalcParser.LesserEqualsContext ctx) {
    	if(visit(ctx.e1) <= visit(ctx.e2)) {
    		return 1.0;
    	}
    	else return 0.0;
    }

    public Double visitNegation(simpleCalcParser.NegationContext ctx) {
    	if (visit(ctx.c) == 1.0) {
    		return 0.0;
    	}
    	else return 1.0;
    }
}

